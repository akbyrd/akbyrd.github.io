Ideas & Requirements
--------------------
* Similar style to Hugo: content files and templates than render those content files
* Use Ninja to run the build graph
* Allow command line tools to be used for any part of the rendering process
* Use libclang to do proper syntax highlighting
* Web server for iterating
* Incremental builds with web server
* Render HTML properly indented for readability (still minify for production)
* Hot reload for the generator itself
* Compiles to WASM and runs in browser
	* Dependencies must compile to WASM as well
* Track all glyphs for font subsetting



Motivation
----------
* Real syntax highlighting
* Offline rendering of LaTeX to SVG/HTML/MathML
* HTML classes for any element (namely, inline ones)
* HTML formatting for readability
* Simplicity
* Render dynamic content like math in comments (WASM)
* Render different graph types
* Tooltips for :emoji:
* Style transparent images differently



Notes
-----
* Markup generates an AST, rendering writes the AST
* Markup language contains
	* Content
	* Semantic markup to describe what the content is
	* High level directives for how it should be rendered.
	* A generic facility for annotating both block and inline elements.
		* Including ids, classes, and custom attributes
	* A generic facility for custom block and inline element types.
* Markup language does not contain
	* Implementation details for how to render the content.
	* Embedded HTML.
* Rendering is in the target language
	* HTML - rendering is a tree of "overlays" that are merged together.
		* Elements can replace matching elements in the parent
		* Or can be "shadow" - only used to match the structure, not for replacement
			* TODO: Might be a bad design - changing a parent structure requires changing all children
				* Named extension points or structural matching?
