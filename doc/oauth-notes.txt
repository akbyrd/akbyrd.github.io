Documentation
-------------
OAuth
https://datatracker.ietf.org/doc/html/rfc6749

Github supports auth through Github Apps and OAuth
https://docs.github.com/en/graphql/guides/forming-calls-with-graphql#authenticating-with-graphql
	App - OAuth 2.0. User or Self. Fine-grained permissions.
	OAuth - OAuth 2.0. User only.

Probably use an App. Should only need permission for my repository.
https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/differences-between-github-apps-and-oauth-apps

Apps Overview
https://docs.github.com/en/apps

Auth Types
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/about-authentication-with-a-github-app
	Github App - Self
	Github App - Install
	Github App - User

Github App - Self
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app

Github App - Install
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-as-a-github-app-installation
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app

Github App - User
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/identifying-and-authorizing-users-for-github-apps
https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app
	Web App flow - https://docs.github.com/en/apps/creating-github-apps/writing-code-for-a-github-app/building-a-login-with-github-button-with-a-github-app
	Device flow - https://docs.github.com/en/apps/creating-github-apps/writing-code-for-a-github-app/building-a-cli-with-a-github-app

Webhook Example
https://github.com/github/github-app-js-sample
288 dependencies

Github Helper Library
https://github.com/octokit/octokit.js
65 dependencies



Notes
-----
Repository owners must install the app to allow it to read and write Discussions in that repo.
Users must authorize the app to post Discussion comments on their behalf.
Thus, the app _only_ has access to Discussions.
But I think a user authorizing the bot on one blog will apply to all blogs that use it.



User Auth Flow
--------------
There are a few different options:
1. client > github > client > server
	This is insecure before the auth grant code is transmitted to client
2. client > server > github > server > client
	This is the recommended flow but it requires an extra redirect / step
3. client > github > server > client
	This seems like a happy middle ground. It should have similar security as the recommended flow
	but requires one less redirect and simplifies the server. It doesn't use the state parameter to
	protect from CSRF attacks, but I don't think that's relevant to this use case. CORS will prevent
	a different site from abusing the API. A serverless function can never stop non-browsers from
	abusing the API, since it can't store the state during the auth flow. The client needs to know
	the app client id, but that's not a secret.



Plan
----
Use an App (can limit to a single repo, can limit to issues but not code)
Attempt to use device flow for auth
Self auth for creating discussions
User auth for querying discussions if not signed in
User auth for querying discussions if signed in (for reaction attribution)
User auth for making posts
Install app to account / repository (needed so it can create dicussions)
TODO: If a user authorizes for a single repo, how does the app detect this and request permissions on a second repo?



Hosting
-------
Languages: native, WASM, TS

AWS Lambda         - Native, Node, Py, Ruby, Java, Go, .NET Core
Microsoft Azure    - TS, JS, C#, F#, Py, pwsh, Java
Google Cloud       - Node, Go, .NET Core, Py, Java, Ruby, PHP
Cloudflare Workers - TS, JS, WASM, Py. Sounds fast
Netlify            - TS, JS, Go. Maybe easier to automate? AWS.
Vercel             - Node, Go, WASM, Py, Ruby, Deno, Rust. AWS. CLI. Sounds fast.
Digital Ocean      - Node, Go, Py, PHP. CLI.

Requirements
Language: TS and {native, WASM, or Go}
Custom domain



Hosting Requirements
--------------------
CLI for deployment
Testing on local machine
Testing in web interface
Logging for all requests
Alerting for errors
Access-Control-Allow-Origin overriding
Env vars specified in web interface
A runtime with the function dependencies below



Function Dependencies
---------------------
btoa / atob
crypto.subtle.importKey
crypto.subtle.sign
JSON.stringify



Digital Ocean
-------------
Buggy and unpleasant to use
BUG: Deploying sometimes hangs
BUG: Building locally then remotely causes tsc not be flagged an executable
BUG: doctl prints incremental progress only once the process is complete
BUG: Can't override access-control-allow-origin
Old Node.js versions (16 and 18)
Error messages aren't great
Web requests don't generate activation records or logging (can use web interface or REST API and POST when testing)
No way to get notifications for errors (unless moving to the App Platform)
Event object is empty when using REST API or browser tests
Deploying blows up environment variables
Doesn't have a way to run entirely locally
Can't use paths/endpoints when testing in the web UI
Support responses are fast. Absolutely worthless though.
Fixed hosting server.
Heavily filtered input
Execution: 900 ms, 8.42 kB

doctl serverless watch api
doctl serverless deploy api --remote-build
doctl serverless functions invoke api -p param:value
doctl serverless activations logs --follow



Vercel
------
QUESTION: Is there a way to debug locally?
QUESTION: Alerts for failed web calls
Has a CLI
Dynamic hosting server location
Requires a phone number for signup
Avoid the need for github access by using CLI
npm + 243 dependencies for the CLI
Can't save over existing env vars
Has logging for web calls
BUG: Automatically deployed to production the first time
Unfiltered input
Can't do HTTPS locally
Can use custom URL
Local dev is slow. 800 ms to recompile on every request
https://vercel.com/templates/other/nodejs-serverless-function-express
TODO: Try out the Edge runtime ("lightweight JS runtime that exposes a set of Web Standard APIs")
Doesn't look like there's a way to test from the web ui
BUG: Stack traces are incorrect

vercel dev
vercel env pull
vercel build --prod
vercel deploy --logs --prod --prebuilt



Webhook Proxies (local dev)
---------------------------
smee
ngrok
cloudflared



Github Types
------------
Use a temporary folder
npm install @octokit/types
Includes REST and GraphQL types



GraphQL
-------
Endpoint: https://api.github.com/graphql
Explorer: https://docs.github.com/en/graphql/overview/explorer
